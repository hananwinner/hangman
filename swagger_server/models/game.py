# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Game(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, game_id: str=None, result: str=None, guess_status: str=None, missed: List[str]=None):  # noqa: E501
        """Game - a model defined in Swagger

        :param game_id: The game_id of this Game.  # noqa: E501
        :type game_id: str
        :param result: The result of this Game.  # noqa: E501
        :type result: str
        :param guess_status: The guess_status of this Game.  # noqa: E501
        :type guess_status: str
        :param missed: The missed of this Game.  # noqa: E501
        :type missed: List[str]
        """
        self.swagger_types = {
            'game_id': str,
            'result': str,
            'guess_status': str,
            'missed': List[str]
        }

        self.attribute_map = {
            'game_id': 'game_id',
            'result': 'result',
            'guess_status': 'guess_status',
            'missed': 'missed'
        }
        self._game_id = game_id
        self._result = result
        self._guess_status = guess_status
        self._missed = missed

    @classmethod
    def from_dict(cls, dikt) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Game of this Game.  # noqa: E501
        :rtype: Game
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_id(self) -> str:
        """Gets the game_id of this Game.


        :return: The game_id of this Game.
        :rtype: str
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id: str):
        """Sets the game_id of this Game.


        :param game_id: The game_id of this Game.
        :type game_id: str
        """
        if game_id is None:
            raise ValueError("Invalid value for `game_id`, must not be `None`")  # noqa: E501

        self._game_id = game_id

    @property
    def result(self) -> str:
        """Gets the result of this Game.


        :return: The result of this Game.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this Game.


        :param result: The result of this Game.
        :type result: str
        """

        self._result = result

    @property
    def guess_status(self) -> str:
        """Gets the guess_status of this Game.


        :return: The guess_status of this Game.
        :rtype: str
        """
        return self._guess_status

    @guess_status.setter
    def guess_status(self, guess_status: str):
        """Sets the guess_status of this Game.


        :param guess_status: The guess_status of this Game.
        :type guess_status: str
        """
        if guess_status is None:
            raise ValueError("Invalid value for `guess_status`, must not be `None`")  # noqa: E501

        self._guess_status = guess_status

    @property
    def missed(self) -> List[str]:
        """Gets the missed of this Game.


        :return: The missed of this Game.
        :rtype: List[str]
        """
        return self._missed

    @missed.setter
    def missed(self, missed: List[str]):
        """Sets the missed of this Game.


        :param missed: The missed of this Game.
        :type missed: List[str]
        """
        if missed is None:
            raise ValueError("Invalid value for `missed`, must not be `None`")  # noqa: E501

        self._missed = missed
